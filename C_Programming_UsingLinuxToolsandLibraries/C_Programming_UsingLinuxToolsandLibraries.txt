
=========================================================
Distinguish between function declaration and function definition


Code discussed in this video:

    #include <stdio.h>

    /// function declaration
    double square(double);

    int main(void) {
        double a = 2.5;
        double aSquared = square(a);
        printf("%.2lf squared = %.2lf\n", a, aSquared);
        return 0;
    }

    double square(double x)
    /// function definition
   {
        return x*x;
    }


========================================================
Use the math library
Use the math library

/
Unit 7.1: Libraries in C
Code discussed in this video:

    #include <stdio.h>
    #include <math.h>

    int main(){
        double a = 2.5;
        double asquared = pow(a,2);
        printf("%.2lf squared = %.2lf\n",a,asquared);
        return 0;
    }

Commands and changes discussed in this video:

    x is raised to the power of y
    a is raised to the power of 2  (squared)
    look at the documentation when you click on pow
    cd /usr/lib
    ls
    or ~ls /usr/lib
    libm.a is the compiled binary file for math library
    find / -name "libm.a" 2>/dev/null
    /usr/lib/x86_64-linux-gnu/libm.a
    find / -name "math.h" 2>/dev/null
    ls /usr/include | less
    ls /usr/include > includes.txt  (open with editor)

Error - undefined reference to 'pow' with C program in GCC Linux
Fixing undefined reference to 'pow' in Linux
This is a common error while compiling C program in GCC/G++ Linux. This error occurs when you are using pow function to calculate power of a number in your programs.

To fix this problem ensure following points:
Include header file math.h in your program.
Add –lm linker flag with compilation command.
1- Include Header file
    #include <stdio.h>
    #include <math.h>
    ...
    ...
2- Compile command
    gcc  main.c -o main -lm
    gcc program.c (/usr/lib/x86_64-linux-gnu/)=l (lib delete first three letters of the definition file name) m (.a delete the extention) -o program


    Compiling C program with math.h library in Linux.
The solution is:
Use -lm after the compile command.
Please read complete article to learn better.

Compile C program with math.h in Linux
Many of the programmer's don't know how to compile a C program which is using math.h library functions? After including math.h header file, program does not compile and return error(s).

Let's understand with an example: Here is a program that will read an integer number and we want to get square root and cube of entered integer number.
As we are aware that sqrt() is used to get square root and pow() is used to get power of any number.

Program - number.c
#include <stdio.h>
#include <math.h>

int main()
{
    int num;
    float sqrRoot;
    long cube;

    printf("Enter any integer number: ");
    scanf("%d",&num);

    sqrRoot=sqrt(num);
    cube=pow(num,3);

    printf("Number: %d \nSquare Root: %f \nCube: %ld \n",num,sqrRoot,cube);

    return 0;
}
Now compile program as normally (as usual we compile any c program),
The compile command is:

gcc number.c -o number
program will throw an error, and the error is:

sh-4.3$ gcc number.c -o number
number.c: undefined reference to 'sqrt'
number.c: undefined reference to 'pow'
Then, how to compile C program with math.h library?
To compile C program with math.h library, you have to put -lm just after the compile command gcc number.c -o number, this command will tell to the compiler to execute program with math.h library.

The command is:

gcc number.c -o number -lm
gcc is the compiler command.
number.c is the name of c program source file.
-o is option to make object file.
number is the name of object file.
-lm is option to execute math.h library file.
See the output after running this command
sh-4.3$ gcc number.c -o number -lm
sh-4.3$ ./number
Enter any integer number: 3
Number: 3
Square Root: 1.732051
Cube: 27

/// Activity: use the math library (External resource)
/*
You are teaching a class on C-programming. The topic of your next lecture is libraries (what a coincidence!).
You would like to teach about the use of the mathematics library in C. To accomplish this, you have written a
program which you intend to discuss with your students during the next class.

Your program should first read from the user an integer, and next take the square root of that integer and print
it out with 8 decimal places. Next, your program should find and print out (on a new line) the mathematical constant
e (Euler's constant) with 10 decimal places. To find e, use the mathematical function exp() and note that e = exp(1).

Finally, in order to remind your students how to use the compiler, please print (on a new line) the correct compiler
command to link the mathematics library with your program. Note that in the example given below this line needs to be
correctly completed. Your program's source code is stored in program.c, and your compilation command should produce an
executable titled program.

Example
Input:
2
Output:
1.41421356
2.7182818285
gcc -std=c11 -Wall -fmax-errors=10 -Wextra (... you need to complete this line correctly ...)

This task offers 1 hint :

Hint 1 :

You can use the -lm flag to include the math library.
*/
/*Write your C code here*/
#include <stdio.h>
#include <math.h>

int main(){
	int a = 0;
	puts ("Please enter an integer");
	scanf("%d", &a);
	printf("%.8lf\n",sqrt(a));
	printf("%.10lf\n",exp(1));
	printf("gcc -std=c11 -Wall -fmax-errors=10 -Wextra -lm program.c -o program\n");
	return 0;
}



/// Use multiple libraries in C
///Use multiple libraries in C



Code discussed in this video:

    #include <stdio.h>
    #include <curses.h>
    #include <menu.h>
    #include <stdlib.h>

    int main(void) {
    	ITEM **my_items;
    	int c;
    	MENU *my_menu;
    	int n_choices, i;
    	char *choices[] = {
    	    "Menu 1",
    	    "Menu 2",
    	    "Menu 3",
    	    "Menu 4"
    	};
    	char *descriptions[] = {
    		"do this",
    		"do that",
    		"do ....",
    		"do ????"
    	};

    	initscr();
    	cbreak();
    	noecho();
    	keypad(stdscr, TRUE);

    	n_choices = sizeof(choices) / sizeof(choices[0]);
    	my_items = (ITEM **)calloc(n_choices + 1, sizeof(ITEM *));

    	for (i=0; i<n_choices; i++) {
    	    my_items[i] = new_item(choices[i], descriptions[i]);
    	}
    	my_items[n_choices] = (ITEM *)NULL;

    	my_menu = new_menu((ITEM **)my_items);
    	mvprintw(LINES - 2, 0, "q to quit");
    	post_menu(my_menu);
    	refresh();

    	while ((c = getch()) != 'q') {
    	    if (c==KEY_DOWN) {
    	        menu_driver(my_menu, REQ_DOWN_ITEM);
    	    } else if (c==KEY_UP) {
    	        menu_driver(my_menu, REQ_UP_ITEM);
    	    }
    	}

    	for (i=0; i<=n_choices; i++) {
    		free_item(my_items[i]);
    	}
    	free_menu(my_menu);
    	endwin();
    	return 0;
    }

~$

You are still teaching that unit on libraries to your students! This time you want to
demonstrate how to invoke the JPEG library (libjpeg.so), which can be used to read and
write image files in JPEG format (feel free to play around here - this is pretty neat!).

You ask your students to write a program with source code stored in vizplus.c and
which uses the JPEG library. In order to help your students you decide to print out the
compilation command for them that creates an executable file called vizplus from vizplus.c
along with linking the JPEG library during the translation process.

Please write a program that prints the necessary compilation command with a simple printf().
Again, your students' source code is provided in vizplus.c. You only need to link the JPEG
library and produce an executable file called vizplus.

#include <stdio.h>
  int main () {
    printf("gcc -std=c11 -Wall -fmax-errors=10 -Wextra vizplus.c -ljpeg -o vizplus\n");
    printf("gcc -std=c11 -Wall -fmax-errors=10 -Wextra /usr/lib/libjpeg.so vizplus.c -o vizplus");
    return 0;
}


Course
/
Unit 7.2: Modularization Libraries and Makefiles
/
Modularizing a program

GCC details



Code discussed in this video:

    #include <stdio.h>
    #include "weather.h"

    int main(void) {
    	double temperatures[7] = {6.9, 12.3, 9.0, 5.3, 9.8, 1.8, 0.3};
    	double average = averageTemp(temperatures, 7);
    	printf("Average 7-day temp: %.2lf\n", average);
    	return 0;
    }

    // and header file weather.h:
    double averageTemp(double *temps, int numOfTemps);

    // source file weather.c:
    double averageTemp(double *temps, int numOfTemps) {
    	double result = 0.0;
    	int i;
    	for (i=0; i<numOfTemps; i++) {
    		result = result + temps[i];
    	}
    	result = result / (double) numOfTemps;
    	return result;
    }

gcc -c -o program.o program.c   /// command to get the binary output object file


gcc -o program program.o  /// to get the executable file.


/// Object file
/// Object file




Code discussed in this video:

    #include <stdio.h>
    #include "weather.h"

    int main(void) {
    	double temperatures[7] = {6.9, 12.3, 9.0, 5.3, 9.8, 1.8, 0.3};
    	printAverageTemp(temperatures, 7);
    	return 0;
    }

Commands discussed in this video:

    compile weatherstats.c to weatherstats.o using

    gcc -std=c11 -Wall -fmax-errors=10 -Wextra -c weatherstats.c -o weatherstats.o

    either make program.o object file similarly and then link using

    gcc -std=c11 -Wall -fmax-errors=10 -Wextra weatherstats.o program.o -o program

    or do both at once using

    gcc -std=c11 -Wall -fmax-errors=10 -Wextra weatherstats.o program.c -o program

____________________________________________________________________________________________________________________________________

Header file weatherstats.h:

    double averageTemp(double *temps, int numOfTemps);

Source file weatherstats.c:

    double averageTemp(double *temps, int numOfTemps) {
    	double result = 0.0;
    	int i;
    	for (i=0; i<numOfTemps; i++) {
    		result = result + temps[i];
    	}
    	result = result / (double) numOfTemps;
    	return result;
    }




/// Modify object files
/// Modify object files

Code discussed in this video:

#include <stdio.h>
#include "weatherstats.h"

int main(void) {
	double temperatures[7] = {6.9, 12.3, 9.0, 5.3, 9.8, 1.8, 0.3};
	double average = averageTemp(temperatures, 7);
        double max = maxTemp(temperatures, 7);
        printf("Average 7-day temp: %.2lf\n",average);
        printf("Highest temp: %.2lf\n", max);
	return 0;
}

________________________________________________________________________________________

Header file weatherstats.h:

    double averageTemp(double *temps, int numOfTemps);
    double maxTemp(double *temps, int numOfTemps);

Source file weatherstats.c

    double averageTemp(double *temps, int numOfTemps) {
    	double result = 0.0;
    	int i;
    	for (i=0; i<numOfTemps; i++) {
    		result = result + temps[i];
    	}
    	result = result / (double) numOfTemps;
    	return result;
    }

    double maxTemp(double *temps, int numOfTemps) {
    	double max = temps[0];
    	int i;
    	for (i=0; i<numOfTemps; i++) {
    		if (max < temps[i]) {
    			max = temps[i];
    		}
    	}
    	return max;
    }




    Course
/
Unit 7.2: Modularization Libraries and Makefiles
/
Creating and using a Makefile


Code discussed in this video:

#include <stdio.h>
#include "weatherstats.h"

int main(void) {
	double temperatures[7] = {6.9, 12.3, 9.0, 15.3, 9.8, 1.8, 0.3};
	double average = averageTemp(temperatures, 7);
	double max = maxTemp(temperatures, 7);
	printf("Average 7-day temp: %.2lf\n", average);
	printf("Highest temp: %.2lf\n", max);
	printf("Lowest temperature: %.2lf\n", minTemp(temperatures,7));
	return 0;
}

Makefile commands discussed in this video:

target (what is to be produced): what is needed to do so
    how to do/produce

Makefile-
    program: program.o weatherstats.o
    	gcc -std=c11 -Wall -fmax-errors=10 -Wextra program.o weatherstats.o -o program

    program.o: program.c weatherstats.h
    	gcc -std=c11 -Wall -fmax-errors=10 -Wextra -c program.c -o program.o

    weatherstats.o: weatherstats.c
    	gcc -std=c11 -Wall -fmax-errors=10 -Wextra -c weatherstats.c -o weatherstats.o

________________________________________________________________________________________

Header file weatherstats.h:

    double averageTemp(double *temps, int numOfTemps);
    double maxTemp(double *temps, int numOfTemps);
    double minTemp(double *temps, int numOfTemps);

Source file weatherstats.c

    double averageTemp(double *temps, int numOfTemps) {
    	double result = 0.0;
    	int i;
    	for (i=0; i<numOfTemps; i++) {
    		result = result + temps[i];
    	}
    	result = result / (double) numOfTemps;
    	return result;
    }

    double maxTemp(double *temps, int numOfTemps) {
    	double max = temps[0];
    	int i;
    	for (i=0; i<numOfTemps; i++) {
    		if (max < temps[i]) {
    			max = temps[i];
    		}
    	}
    	return max;
    }

    double minTemp(double *temps, int numOfTemps) {
    	double min = temps[0];
    	int i;
    	for (i=0; i<numOfTemps; i++) {
    		if (min > temps[i]) {
    			min = temps[i];
    		}
    	}
    	return min;
    }

